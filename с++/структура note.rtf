{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include "stdafx.h"\
#include <iostream>\
#include <fstream>\
#include <string>\
#include <cstddef>\
#include <clocale>\
#include <conio.h>\
#include <cstdlib>\
\
using namespace std;\
\
// <<<<<<<-------- \uc0\u1086 \u1087 \u1080 \u1089 \u1072 \u1085 \u1080 \u1077  \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \u1099  \u1080  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1074  \u1076 \u1083 \u1103  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099  \u1089  \u1085 \u1077 \u1081  -------->>>>>>>\
struct NOTE\
\{\
	string surname; // \uc0\u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1103 \
	string name;    // \uc0\u1080 \u1084 \u1103 \
	string tel;     // \uc0\u1085 \u1086 \u1084 \u1077 \u1088  \u1090 \u1077 \u1083 \u1077 \u1092 \u1086 \u1085 \u1072 \
	int date[3];    // \uc0\u1076 \u1072 \u1090 \u1072  \u1088 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1103 \
	bool filled;    // \uc0\u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1072  \u1083 \u1080  \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \u1085 \u1072 \u1103  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1072 \u1103 \
\
					// \uc0\u1084 \u1077 \u1090 \u1086 \u1076 \u1099 \
	NOTE();             // \uc0\u1082 \u1086 \u1085 \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1086 \u1088  \u1087 \u1086 -\u1091 \u1084 \u1086 \u1083 \u1095 \u1072 \u1085 \u1080 \u1102  (\u1076 \u1083 \u1103  \u1089 \u1086 \u1079 \u1076 \u1072 \u1085 \u1080 \u1103  \u1074  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1077 )\
	NOTE(const string &, const string &, const string &, const int, const int,\
		const int);     // \uc0\u1072 \u1088 \u1075 \u1091 \u1084 \u1077 \u1085 \u1090 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1085 \u1099 \u1081  \u1082 \u1086 \u1085 \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1086 \u1088 \
	void print() const; // \uc0\u1074 \u1099 \u1074 \u1086 \u1076  \u1085 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085  \u1074  \u1091 \u1076 \u1086 \u1073 \u1085 \u1086 \u1084  \u1092 \u1086 \u1088 \u1084 \u1072 \u1090 \u1077 \
	void init();        // \uc0\u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1091 \u1077 \u1090 \u1089 \u1103  \u1076 \u1083 \u1103  \u1080 \u1085 \u1080 \u1094 \u1080 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1080 \
\};\
\
// \uc0\u1087 \u1077 \u1088 \u1077 \u1075 \u1088 \u1091 \u1078 \u1072 \u1077 \u1084  \u1086 \u1087 \u1077 \u1088 \u1072 \u1090 \u1086 \u1088  \u1076 \u1083 \u1103  \u1089 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1080  \u1089 \u1086 \u1088 \u1090 \u1080 \u1088 \u1086 \u1074 \u1082 \u1077 \
bool operator< (const NOTE &, const NOTE &);\
// \uc0\u1087 \u1077 \u1088 \u1077 \u1075 \u1088 \u1091 \u1078 \u1072 \u1077 \u1084  \u1086 \u1087 \u1077 \u1088 \u1072 \u1090 \u1086 \u1088  \u1089 \u1095 \u1080 \u1090 \u1099 \u1074 \u1072 \u1085 \u1080 \u1103  \u1089  \u1087 \u1086 \u1090 \u1086 \u1082 \u1072 \
istream & operator>> (istream &, NOTE &);\
\
// <<<<<<<<----------- \uc0\u1086 \u1087 \u1080 \u1089 \u1072 \u1085 \u1080 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1081  \u1076 \u1083 \u1103  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1099  ----------->>>>>>>>\
// \uc0\u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1103  \u1089 \u1086 \u1088 \u1090 \u1080 \u1088 \u1086 \u1074 \u1082 \u1080  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081 \
void mySort(NOTE *, const size_t);\
\
// \uc0\u1086 \u1073 \u1088 \u1072 \u1073 \u1086 \u1090 \u1082 \u1072  \u1084 \u1077 \u1085 \u1102 \
void menu(NOTE *, const size_t);\
void menuChoise(NOTE *, const size_t, const int choise);\
\
// \uc0\u1074 \u1099 \u1074 \u1086 \u1076 \u1099  \u1080 \u1085 \u1092 \u1086 \u1088 \u1084 \u1072 \u1094 \u1080 \u1080  \u1085 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \
void printMenu();\
void printAllNOTES(NOTE *, const size_t);\
\
// \uc0\u1091 \u1087 \u1088 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1103 \u1084 \u1080 \
// \uc0\u1076 \u1086 \u1073 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080  \u1074  \u1087 \u1077 \u1088 \u1074 \u1099 \u1081  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1099 \u1081  \u1101 \u1083 \u1077 \u1084 \u1077 \u1085 \u1090  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072 \
void addNOTE(NOTE *, const size_t);\
// \uc0\u1091 \u1076 \u1072 \u1083 \u1077 \u1085 \u1080 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080  \u1087 \u1086  \u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1080 \
//void delBySurname(NOTE *, const size_t, const string &);\
\
// \uc0\u1087 \u1086 \u1080 \u1089 \u1082  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081 \
// \uc0\u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1097 \u1072 \u1077 \u1090  \u1080 \u1085 \u1076 \u1077 \u1082 \u1089  \u1087 \u1077 \u1088 \u1074 \u1086 \u1081  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1086 \u1081  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080 \
size_t findFirstEmpty(const NOTE *, const size_t);\
// \uc0\u1087 \u1086 \u1080 \u1089 \u1082  \u1087 \u1086  \u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1080 \
bool findBySurname(const NOTE *, const size_t, const int );\
\
// \uc0\u1087 \u1091 \u1089 \u1090 \u1086 \u1081  \u1083 \u1080  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074  (\u1074 \u1089 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1099 )\
bool isEmpty(const NOTE *, const size_t);\
\
// \uc0\u1088 \u1072 \u1073 \u1086 \u1090 \u1072  \u1089  \u1092 \u1072 \u1081 \u1083 \u1072 \u1084 \u1080 \
void readFromFile(NOTE *, const size_t);\
\
\
// <<<<<<<<<<<<<<<--------------- \uc0\u1075 \u1083 \u1072 \u1074 \u1085 \u1072 \u1103  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1103  --------------->>>>>>>>>>>>>>>\
int main()\
\{\
	setlocale(LC_ALL, "");\
	const size_t NOTE_SIZE = 8; // \uc0\u1088 \u1072 \u1079 \u1084 \u1077 \u1088  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072  \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \
	NOTE n[NOTE_SIZE];          // \uc0\u1084 \u1072 \u1089 \u1089 \u1080 \u1074  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081 \
	menu(n, NOTE_SIZE);         // \uc0\u1074 \u1093 \u1086 \u1076 \u1080 \u1084  \u1074  \u1086 \u1089 \u1085 \u1086 \u1074 \u1085 \u1086 \u1081  \u1094 \u1080 \u1082 \u1083  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1099 \
\
	return 0;\
\}\
\
\
// <<<<<<-------- \uc0\u1088 \u1077 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1103  \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \u1099  \u1080  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1074  \u1076 \u1083 \u1103  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099  \u1089  \u1085 \u1077 \u1081  -------->>>>>>\
NOTE::NOTE() : surname(), name(), tel(), filled(false)\
\{\}\
\
// \uc0\u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1091 \u1077 \u1084  \u1089 \u1087 \u1080 \u1089 \u1086 \u1082  \u1080 \u1085 \u1080 \u1094 \u1080 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1080 \
NOTE::NOTE(const string &s, const string &n, const string &t, const int d1,\
	const int d2, const int d3) : surname(s), name(n), tel(t), filled(false)\
\{\
	date[0] = d1;\
	date[1] = d2;\
	date[2] = d3;\
\}\
\
void NOTE::init()\
\{\
	system("cls"); // \uc0\u1086 \u1095 \u1080 \u1089 \u1090 \u1082 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \u1072 \
	cout << "\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1102 : ";\
	cin >> surname;\
	cout << "\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1080 \u1084 \u1103 : ";\
	cin >> name;\
	cout << "\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1085 \u1086 \u1084 \u1077 \u1088  \u1090 \u1077 \u1083 \u1077 \u1092 \u1086 \u1085 \u1072 : ";\
	cin >> tel;\
	cout << "\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1076 \u1072 \u1090 \u1091  \u1088 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1103  (\u1095 \u1077 \u1088 \u1077 \u1079  \u1087 \u1088 \u1086 \u1073 \u1077 \u1083 ): ";\
	cin >> date[0] >> date[1] >> date[2];\
	cout << endl;\
	filled = true;\
\}\
\
void NOTE::print() const\
\{\
	cout << "\uc0\u1060 \u1072 \u1084 \u1080 \u1083 \u1080 \u1103 :        " << surname\
		<< "\\n\uc0\u1048 \u1084 \u1103 :            " << name\
		<< "\\n\uc0\u1053 \u1086 \u1084 \u1077 \u1088  \u1090 \u1077 \u1083 \u1077 \u1092 \u1086 \u1085 \u1072 : " << tel\
		<< "\\n\uc0\u1044 \u1072 \u1090 \u1072  \u1088 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1103 :  " << date[0] << ' ' << date[1] << ' ' << date[2]\
		<< endl << endl;\
\}\
\
bool operator< (const NOTE &n1, const NOTE &n2)\
\{\
	// \uc0\u1089 \u1088 \u1072 \u1074 \u1085 \u1080 \u1074 \u1072 \u1077 \u1084  \u1087 \u1086  \u1087 \u1077 \u1088 \u1074 \u1099 \u1084  \u1090 \u1088 \u1077 \u1084  \u1094 \u1080 \u1092 \u1088 \u1072 \u1084  \u1090 \u1077 \u1083 \u1077 \u1092 \u1086 \u1085 \u1072 \
	return n1.tel.substr(0, 3) < n2.tel.substr(0, 3);\
\}\
\
istream & operator>> (istream &ist, NOTE &n)\
\{\
	// \uc0\u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1100 \u1085 \u1086  \u1089 \u1095 \u1080 \u1090 \u1099 \u1074 \u1072 \u1077 \u1084  \u1076 \u1072 \u1085 \u1085 \u1099 \u1077 \
	ist >> n.surname >> n.name >> n.tel >> n.date[0] >> n.date[1] >> n.date[2];\
	n.filled = true; // \uc0\u1079 \u1072 \u1087 \u1080 \u1089 \u1100  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1072 \
	return ist; // \uc0\u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1097 \u1072 \u1077 \u1084  \u1087 \u1086 \u1090 \u1086 \u1082 \
\}\
\
\
// <<<<<<<----------- \uc0\u1088 \u1077 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1103  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1081  \u1076 \u1083 \u1103  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1099  ----------->>>>>>>\
\
void mySort(NOTE *n, const size_t size)\
\{\
	for (size_t i = 0; i < size - 1; i++)\
		for (size_t j = size - 1; j > i; j--)\
			if (n[j] < n[i])\
			\{\
				NOTE tmp = n[i];\
				n[i] = n[j];\
				n[j] = tmp;\
			\}\
\}\
\
void menu(NOTE *n, const size_t size)\
\{\
	char choise;\
	do\
	\{\
		printMenu();\
		cin >> choise; // \uc0\u1079 \u1072 \u1087 \u1086 \u1084 \u1080 \u1085 \u1072 \u1077 \u1084  \u1074 \u1099 \u1073 \u1086 \u1088 \
		if (choise < '0' || choise > '5')\
		\{\
			cout << "\\n\uc0\u1042 \u1099 \u1073 \u1077 \u1088 \u1080 \u1090 \u1077  \u1082 \u1086 \u1088 \u1088 \u1077 \u1082 \u1090 \u1085 \u1099 \u1081  \u1087 \u1091 \u1085 \u1082 \u1090  \u1084 \u1077 \u1085 \u1102 \\a"; // \u1075 \u1091 \u1076 \u1086 \u1082 \
			_getch();\
		\}\
		else\
			menuChoise(n, size, choise - '0');\
	\} while (choise != '0');\
\}\
\
void menuChoise(NOTE *n, const size_t size, const int choise)\
\{\
	switch (choise)\
	\{\
	case 1:\
		readFromFile(n, size);\
		break;\
\
	case 2:\
		addNOTE(n, size);\
		break;\
\
	case 3:\
		printAllNOTES(n, size);\
		break;\
\
	case 4:\
	\{\
		int key;\
		cout << "\\n\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1084 \u1077 \u1089 \u1103 \u1094 : ";\
		cin >> key;\
		bool result = findBySurname(n, size, key);\
		if (!result)\
		\{\
			cout << "\\n\uc0\u1047 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081  \u1085 \u1077  \u1085 \u1072 \u1081 \u1076 \u1077 \u1085 \u1086 ";\
			_getch();\
		\}\
		break;\
	\}\
\
	case 5:\
	\{\
		string key;\
		cout << "\\n\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077  \u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1102 : ";\
		cin >> key;\
//		delBySurname(n, size, key);\
		break;\
	\}\
\
	default: // \uc0\u1087 \u1088 \u1086 \u1089 \u1090 \u1086  \u1085 \u1072  \u1074 \u1089 \u1103 \u1082 \u1080 \u1081  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \
		break;\
	\}\
\} // end of menuChoise(NOTE *, const size_t, const int)\
\
void printMenu()\
\{\
	system("cls"); // \uc0\u1086 \u1095 \u1080 \u1089 \u1090 \u1082 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \u1072 \
	cout << "\uc0\u1063 \u1090 \u1086  \u1078 \u1077 \u1083 \u1072 \u1077 \u1090 \u1077  \u1089 \u1076 \u1077 \u1083 \u1072 \u1090 \u1100 :\\n"\
		<< "1. \uc0\u1042 \u1074 \u1086 \u1076  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1080 \u1079  \u1092 \u1072 \u1081 \u1083 \u1072 \\n"\
		<< "2. \uc0\u1042 \u1074 \u1086 \u1076  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1089  \u1082 \u1083 \u1072 \u1074 \u1080 \u1072 \u1090 \u1091 \u1088 \u1099 \\n"\
		<< "3. \uc0\u1055 \u1088 \u1086 \u1089 \u1084 \u1086 \u1090 \u1088  \u1074 \u1089 \u1077 \u1093  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093 \\n"\
		<< "4. \uc0\u1042 \u1099 \u1074 \u1086 \u1076  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1087 \u1086  \u1084 \u1077 \u1089 \u1103 \u1094 \u1091 \\n"\
		//<< "5. \uc0\u1059 \u1076 \u1072 \u1083 \u1077 \u1085 \u1080 \u1077  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1087 \u1086  \u1079 \u1072 \u1087 \u1088 \u1086 \u1089 \u1091 \\n"\
		<< "0. \uc0\u1042 \u1099 \u1093 \u1086 \u1076 \\n"\
		<< "\\n\uc0\u1042 \u1072 \u1096  \u1074 \u1099 \u1073 \u1086 \u1088 : ";\
\}\
\
void printAllNOTES(NOTE *n, const size_t size)\
\{\
	if (isEmpty(n, size))\
	\{\
		cout << "\\a\\n\uc0\u1057 \u1087 \u1080 \u1089 \u1086 \u1082  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081  \u1087 \u1091 \u1089 \u1090 . \u1044 \u1083 \u1103  \u1085 \u1072 \u1095 \u1072 \u1083 \u1072  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1080 \u1090 \u1077  \u1077 \u1075 \u1086 ";\
		_getch();\
		return;\
	\}\
\
	system("cls");   // \uc0\u1086 \u1095 \u1080 \u1089 \u1090 \u1082 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \u1072 \
	mySort(n, size); // \uc0\u1089 \u1086 \u1088 \u1090 \u1080 \u1088 \u1091 \u1077 \u1084  \u1087 \u1086  \u1085 \u1086 \u1084 \u1077 \u1088 \u1091  \u1090 \u1077 \u1083 \u1077 \u1092 \u1086 \u1085 \u1072 \
	for (size_t i = 0; i < size; i++)\
		if (n[i].filled)  // \uc0\u1077 \u1089 \u1083 \u1080  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1072 \
			n[i].print(); // \uc0\u1074 \u1099 \u1074 \u1086 \u1076 \u1080 \u1084  \u1077 \u1105  \u1085 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \
\
	cout << "\uc0\u1053 \u1072 \u1079 \u1072 \u1076 ";\
	_getch(); // \uc0\u1087 \u1072 \u1091 \u1079 \u1072  \u1095 \u1090 \u1086 \u1073 \u1099  \u1091 \u1074 \u1080 \u1076 \u1077 \u1090 \u1100  \u1088 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \u1099  \u1088 \u1072 \u1073 \u1086 \u1090 \u1099 \
\}\
\
void addNOTE(NOTE *n, const size_t size)\
\{\
	size_t index = findFirstEmpty(n, size); // \uc0\u1080 \u1097 \u1077 \u1084  \u1087 \u1077 \u1088 \u1074 \u1091 \u1102  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1091 \u1102 \
	if (index == size) // \uc0\u1077 \u1089 \u1083 \u1080  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1099 \
	\{\
		cout << "\\n\\a\uc0\u1042 \u1089 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1099 ";\
		return;\
	\}\
	else // \uc0\u1080 \u1085 \u1072 \u1095 \u1077  \u1074 \u1099 \u1079 \u1099 \u1074 \u1072 \u1077 \u1084  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1102  \u1080 \u1085 \u1080 \u1094 \u1080 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1080  \u1076 \u1083 \u1103  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1086 \u1081  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080 \
		n[index].init();\
\}\
\
/*void delBySurname(NOTE *n, const size_t size, const string &key)\
\{\
	if (isEmpty(n, size))\
	\{\
		cout << "\\a\\n\uc0\u1057 \u1087 \u1080 \u1089 \u1086 \u1082  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081  \u1087 \u1091 \u1089 \u1090 . \u1044 \u1083 \u1103  \u1085 \u1072 \u1095 \u1072 \u1083 \u1072  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1080 \u1090 \u1077  \u1077 \u1075 \u1086 ";\
		_getch();\
		return;\
	\}\
\
	int counter = 0;\
	for (size_t i = 0; i < size; i++)\
		// \uc0\u1077 \u1089 \u1083 \u1080  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100  \u1079 \u1072 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1072  \u1080  \u1077 \u1105  \u1092 \u1072 \u1084 \u1080 \u1083 \u1080 \u1103  \u1089 \u1086 \u1074 \u1087 \u1072 \u1076 \u1072 \u1077 \u1090 \
		if (n[i].filled && n[i].surname == key)\
		\{\
			n[i].filled = false; // \uc0\u1087 \u1086 \u1084 \u1077 \u1095 \u1072 \u1077 \u1084  \u1077 \u1105  \u1082 \u1072 \u1082  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1091 \u1102 \
			++counter;           // \uc0\u1091 \u1074 \u1077 \u1083 \u1080 \u1095 \u1080 \u1074 \u1072 \u1077 \u1084  \u1089 \u1095 \u1077 \u1090 \u1095 \u1080 \u1082  \u1091 \u1076 \u1072 \u1083 \u1077 \u1085 \u1085 \u1099 \u1093  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081 \
		\}\
\
	cout << "\\n\uc0\u1059 \u1076 \u1072 \u1083 \u1077 \u1085 \u1086  " << counter << " \u1101 \u1083 \u1077 \u1084 \u1077 \u1085 \u1090 \u1086 \u1074 ";\
	_getch();\
\}*/\
\
size_t findFirstEmpty(const NOTE *n, const size_t size)\
\{\
	size_t index; // \uc0\u1077 \u1089 \u1083 \u1080  \u1085 \u1077  \u1085 \u1072 \u1081 \u1076 \u1077 \u1085 \u1086 , \u1090 \u1086  \u1074 \u1077 \u1088 \u1085 \u1077 \u1090  size (\u1091 \u1089 \u1083 \u1086 \u1074 \u1085 \u1086  - \u1082 \u1086 \u1076  \u1086 \u1096 \u1080 \u1073 \u1082 \u1080 )\
				  // \uc0\u1087 \u1086 \u1082 \u1072  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100  \u1079 \u1072 \u1085 \u1103 \u1090 \u1072  - \u1080 \u1085 \u1082 \u1088 \u1077 \u1084 \u1077 \u1085 \u1090 \u1080 \u1088 \u1091 \u1077 \u1084  \u1080 \u1085 \u1076 \u1077 \u1082 \u1089  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1086 \u1081  \u1079 \u1072 \u1087 \u1080 \u1089 \u1080 \
	for (index = 0; n[index].filled && index < size; index++);\
\
	return index;\
\}\
\
bool findBySurname(const NOTE *n, const size_t size, const int key)\
\{\
	bool finded = false; // \uc0\u1085 \u1072 \u1081 \u1076 \u1077 \u1085 \u1072  \u1083 \u1080  \u1093 \u1086 \u1090 \u1100  \u1086 \u1076 \u1085 \u1072  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100 \
	for (size_t i = 0; i < size; i++)\
		if (n[i].date[1] == key) \
		\{\
			if (!finded) // \uc0\u1077 \u1089 \u1083 \u1080  \u1074  \u1087 \u1077 \u1088 \u1074 \u1099 \u1081  \u1088 \u1072 \u1079 \
			\{\
				system("cls");\
				finded = true; // \uc0\u1085 \u1072 \u1096 \u1083 \u1080  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100 \
			\}\
			n[i].print();  // \uc0\u1074 \u1099 \u1074 \u1086 \u1076 \u1080 \u1084  \u1085 \u1072  \u1101 \u1082 \u1088 \u1072 \u1085 \
		\}\
\
	if (finded)   // \uc0\u1077 \u1089 \u1083 \u1080  \u1077 \u1089 \u1090 \u1100  \u1088 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \
	\{\
		cout << "\uc0\u1053 \u1072 \u1079 \u1072 \u1076 ";\
		_getch(); // \uc0\u1090 \u1086  \u1076 \u1077 \u1083 \u1072 \u1077 \u1084  \u1087 \u1072 \u1091 \u1079 \u1091  \u1095 \u1090 \u1086 \u1073 \u1099  \u1087 \u1086 \u1089 \u1084 \u1086 \u1090 \u1088 \u1077 \u1090 \u1100  \u1085 \u1072  \u1085 \u1077 \u1075 \u1086 \
	\}\
	return finded;\
\}\
\
bool isEmpty(const NOTE *n, const size_t size)\
\{\
	for (size_t i = 0; i < size; i++)\
		if (n[i].filled) // \uc0\u1077 \u1089 \u1083 \u1080  \u1079 \u1072 \u1087 \u1080 \u1089 \u1100  \u1079 \u1072 \u1085 \u1103 \u1090 \u1072 \
			return false;   // \uc0\u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1097 \u1072 \u1077 \u1084  \u1083 \u1086 \u1078 \u1100 \
\
	return true; // \uc0\u1087 \u1088 \u1086 \u1073 \u1077 \u1078 \u1072 \u1083 \u1080 \u1089 \u1100  \u1087 \u1086  \u1074 \u1089 \u1077 \u1084  \u1079 \u1072 \u1087 \u1080 \u1089 \u1103 \u1084  \u1080  \u1085 \u1080  \u1086 \u1076 \u1085 \u1072  \u1085 \u1077  \u1079 \u1072 \u1085 \u1103 \u1090 \u1072 \
\}\
\
// \uc0\u1088 \u1072 \u1073 \u1086 \u1090 \u1072  \u1089  \u1092 \u1072 \u1081 \u1083 \u1072 \u1084 \u1080 \
void readFromFile(NOTE *n, const size_t size)\
\{\
	ifstream ifs("NOTES.txt");\
	if (!ifs)\
	\{\
		cerr << "\\a\\n\uc0\u1053 \u1077 \u1074 \u1086 \u1079 \u1084 \u1086 \u1078 \u1085 \u1086  \u1085 \u1072 \u1081 \u1090 \u1080  \u1092 \u1072 \u1081 \u1083 ";\
		_getch();\
		return;\
	\}\
\
	size_t index, counter = 0;\
	// \uc0\u1087 \u1086 \u1082 \u1072  \u1085 \u1077  \u1082 \u1086 \u1085 \u1077 \u1094  \u1092 \u1072 \u1081 \u1083 \u1072  \u1080  \u1077 \u1089 \u1090 \u1100  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1086 \u1077  \u1084 \u1077 \u1089 \u1090 \u1086  \u1074  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1077  \u1079 \u1072 \u1087 \u1080 \u1089 \u1077 \u1081 \
	while (!ifs.eof() && (index = findFirstEmpty(n, size)) != size)\
	\{\
		ifs >> n[index]; // \uc0\u1089 \u1095 \u1080 \u1090 \u1099 \u1074 \u1072 \u1077 \u1084  \u1076 \u1072 \u1085 \u1085 \u1099 \u1077  \u1074  \u1089 \u1074 \u1086 \u1073 \u1086 \u1076 \u1085 \u1099 \u1081  \u1101 \u1083 \u1077 \u1084 \u1077 \u1085 \u1090  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072 \
		++counter;       // \uc0\u1091 \u1074 \u1077 \u1083 \u1080 \u1095 \u1080 \u1074 \u1072 \u1077 \u1084  \u1089 \u1095 \u1077 \u1090 \u1095 \u1080 \u1082  \u1089 \u1095 \u1080 \u1090 \u1072 \u1085 \u1085 \u1099 \u1093  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1099 \u1093  \u1085 \u1072  \u1086 \u1076 \u1080 \u1085 \
	\}\
\
	cout << "\\n\uc0\u1057 \u1095 \u1080 \u1090 \u1072 \u1085 \u1086  " << counter << " \u1101 \u1083 \u1077 \u1084 \u1077 \u1085 \u1090 \u1086 \u1074 ";\
	_getch();\
	ifs.close(); // \uc0\u1079 \u1072 \u1082 \u1088 \u1099 \u1074 \u1072 \u1077 \u1084  \u1087 \u1086 \u1090 \u1086 \u1082  \u1089 \u1095 \u1080 \u1090 \u1099 \u1074 \u1072 \u1085 \u1080 \u1103  \u1089  \u1092 \u1072 \u1081 \u1083 \u1072 \
\}}