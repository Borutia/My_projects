#include <iostream>
#include <ctime>
#include <cmath>

using namespace std;

template <typename T> void FreeMemory(T** matr, int n);
template <typename T> void SetMatrix(T** matr, int n);
template <typename T> void TMatrix(T** matr, T** tMatr, int n);
template <typename T> void CopyMtx(T** matr, T** tMatr, int n);
void Get_matrix(double** matr, int n, double** temp_matr, int indRow, int indCol);
double Det(double** matr, int n);

int main()
{
	setlocale(0, "");

	int n;
	double det = 0;

	cout << " Введите размер матрицы: ";
	cin >> n;

	double** matrix = new double*[n];
	double* free = new double[n];
	for (int i = 0; i < n; i++) free[i] = 0;

	for (int i = 0; i < n; i++) {
		matrix[i] = new double[n];
	}

	double** temp = new double*[n];
	double* t_matr = new double[n];
	for (int i = 0; i < n; i++) {
		temp[i] = new double[n];
	}

	cout << "Введите матрицу коэф." << endl;
	SetMatrix(matrix, n);

	if (cin.good() == false) {
		cout << "Ошибка ввода" << endl;
		exit(1);
	}

	cout << "Введите свободные члены" << endl;
	for (int i = 0; i < n; i++) {
		cin >> free[i];
		if (cin.good() == false) {
			cout << "Ошибка ввода" << endl;
			exit(1);
		}
	}

	det = Det(matrix, n);

	for (int i = 0; i < n; i++) {
		CopyMtx(matrix, temp, n);
		for (int j = 0; j < n; j++) {
			temp[i][j] = free[j];
		}
		t_matr[i] = Det(temp, n);
	}
	cout << " ===================" << endl;
	for (int i = 0; i < n; i++) {
		cout << "x" << i + 1 << " = " << t_matr[i] / det * 100 / 100 << endl;
	}
	delete[] t_matr;
	FreeMemory(matrix, n);

	system("pause");
	return 0;
}

template <typename T> void TMatrix(T** matr, T** tMatr, int n) {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			tMatr[j][i] = matr[i][j];
}

template <typename T> void CopyMtx(T** matr, T** tMatr, int n) {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			tMatr[j][i] = matr[j][i];
}

template <typename T> void FreeMemory(T** matr, int n)
{
	for (int i = 0; i < n; i++)
		delete[] matr[i];
	delete[] matr;
}

template <typename T> void SetMatrix(T** matr, int n)
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			cin >> matr[j][i];
	}

}

void Get_matrix(double** matr, int n, double** temp_matr, int indRow, int indCol)
{
	int ki = 0;
	for (int i = 0; i < n; i++) {
		if (i != indRow) {
			for (int j = 0, kj = 0; j < n; j++) {
				if (j != indCol) {
					temp_matr[ki][kj] = matr[i][j];
					kj++;
				}
			}
			ki++;
		}
	}
}

double Det(double** matr, int n)
{
	double temp = 0;
	int k = 1;
	if (n < 1) {
		cout << " Неверный размер матрицы" << endl;
		exit(1);
	}
	else if (n == 1)
		temp = matr[0][0];
	else if (n == 2) {
		temp = matr[0][0] * matr[1][1] - matr[1][0] * matr[0][1];
	}
	else {
		for (int i = 0; i < n; i++) {
			int m = n - 1;
			double** temp_matr = new double*[m];
			for (int j = 0; j < m; j++)
				temp_matr[j] = new double[m];
			Get_matrix(matr, n, temp_matr, 0, i);
			temp = temp + k * matr[0][i] * Det(temp_matr, m);
			k = -k;
			FreeMemory(temp_matr, m);
		}
	}
	return temp;
}